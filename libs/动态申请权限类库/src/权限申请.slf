引入 android.widget.*
引入 android.os.*
引入 android.view.*
引入 android.view.View.*
引入 android.webkit.*
引入 android.graphics.*
引入 android.graphics.drawable.*
引入 android.app.*
引入 android.content.*
引入 android.content.res.*
引入 android.content.pm.PackageInfo;
引入 android.content.pm.PackageManager;
引入 android.net.Uri;
引入 android.provider.Settings;
引入 android.Manifest
引入 java.util.*
引入 java.io.*

类 权限申请 继承 组件
   
   @java
   private Activity activity;
   private PermissionHelper helper;
   @end
   
   构造方法 权限申请(窗口环境 为 安卓窗口)
      父对象(窗口环境)
      本对象.activity = 窗口环境
      helper = new PermissionHelper(窗口环境)
   结束 方法

   //获取当前应用的版本号
   方法 取应用版本号() 为 整数型
      @java
        PackageManager manager = 取上下文().getPackageManager();
        try {
            PackageInfo info = manager.getPackageInfo(取上下文().getPackageName(), 0);
            return info.versionCode;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return 0;
      @end
   结束 方法

   //判断当前应用是否具有悬浮窗权限
   方法 是否有悬浮窗权限() 为 逻辑型
      返回 Settings.canDrawOverlays(取上下文())
   结束 方法

   //判断当前应用是否具有应用安装权限
   方法 是否有应用安装权限() 为 逻辑型
      返回 取上下文().getPackageManager().canRequestPackageInstalls()
   结束 方法

   //申请所有权限
   方法 申请所有权限()
      @java
        helper.requestPermission(((Activity)取上下文()), new PermissionHelper.PermissionResultCallback() {
            @Override
            public void onPermissionResult(boolean allGranted) {
                挂接事件 申请完毕(allGranted);
            }
        }, 取应用所有权限());
      @end
   结束 方法

   //申请权限，参数可以无限扩展
   方法 申请权限(欲申请权限 为 文本型...)
      @java
        helper.requestPermission(((Activity)取上下文()), new PermissionHelper.PermissionResultCallback() {
            @Override
            public void onPermissionResult(boolean allGranted) {
                挂接事件 申请完毕(allGranted);
            }
        }, 欲申请权限);
      @end
   结束 方法

   //调用该方法会跳转至手机设置界面去申请悬浮窗权限，并传入请求码5003，可在窗口申请权限回调事件进行判别
   方法 申请悬浮窗权限()
      @java
      Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
      intent.setData(Uri.parse("package:" + 取上下文().getPackageName()));
      ((Activity)取上下文()).startActivityForResult(intent, 5003);
      @end
   结束 方法

   //调用该方法会跳转至手机设置界面去申请应用安装权限，并传入请求码5004，可在窗口申请权限回调事件进行判别
   方法 申请应用安装权限()
      @java
      Uri packageURI = Uri.parse("package:" + 取上下文().getPackageName());
      Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES, packageURI);
      ((Activity)取上下文()).startActivityForResult(intent, 5004);
      @end
   结束 方法

   //判断应用是否缺少权限，参数可无限扩展
   方法 是否缺少权限(欲判断权限 为 文本型...) 为 逻辑型
      返回 helper.lacksPermissions(欲判断权限)
   结束 方法

   //获取应用所有权限
   方法 取应用所有权限() 为 文本型[]
      @java
        PackageManager manager = 取上下文().getPackageManager();
        try {
            PackageInfo info = manager.getPackageInfo(取上下文().getPackageName(), 0);
            String pkgName = info.packageName;
            PackageInfo packageInfo = manager.getPackageInfo(pkgName, PackageManager.GET_PERMISSIONS);
            return packageInfo.requestedPermissions;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return new String[0];
        }
      @end
   结束 方法

   //申请权限完毕时触发该事件，返回申请结果
   定义事件 申请完毕(结果 为 逻辑型)
   结束 事件

结束 类